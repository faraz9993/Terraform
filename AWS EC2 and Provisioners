Que: AWS EC2 and Provisioners
Navigate to the directory /root/terraform-projects/project-cerberus. We have an empty main.tf file in this directory.
Using this configuration file write a resource block to provision a simple EC2 instance with the following specifications:
Resource Name: cerberus
AMI: ami-06178cf087598769c, use variable named ami
region: eu-west-2, use variable named region
Instance Type: m5.large, use variable named instance_type
Once ready, run terraform init, plan and apply to provision this EC2 instance.

Ans:
variable "ami" {
default = "ami-06178cf087598769c"
}

variable "instance_type" {
default = "m5.large"
}

variable "region" {
default = "eu-west-2"
}

resource "aws_instance" "cerberus" {
ami = var.ami
instance_type = var.instance_type
}
Terraform init, plan and apply commands ran successfully.

A new SSH key pair has been created in the directory /root/terraform-projects/project-cerberus/.ssh.
The private key is called cerberus and the public key is called cerberus.pub
Using the public key, create a new key-pair in AWS with the following specifications:
Resource Name: cerberus-key
key_name: cerberus
Use the file functions to read the public key cerberus.pub
When ready, run a terrafom plan and apply to create this  key pair.



Que: Let us now install nginx with EC2 instance. To do this, lets make use of the user_data argument.
Using the file function again or by making use of the heredoc syntax, use the script called install-nginx.sh as the value for the user_data argument.
Do not run terraform apply yet!
Ans: 
variable "ami" {
default = "ami-06178cf087598769c"
}
variable "instance_type" {
default = "m5.large"

}
variable "region" {
default = "eu-west-2"
}
resource "aws_instance" "cerberus" {
ami = var.ami
instance_type = var.instance_type
key_name = "cerberus"
user_data = file("./install-nginx.sh")

}
resource "aws_key_pair" "cerberus-key" {
key_name = "cerberus"
public_key = file(".ssh/cerberus.pub")
}


Que: Run terraform apply and let the EC2 instance be modified.
Ans: Terraform apply command ran successfully

Que: Where should you add a provisioner block?
Ans: Nested block inside the resource block

Que: Which of the following provisioners does not need a connection block defined?
Ans: Local-exec

Que: What is the public IPv4 address that has been allocated to this EC2 instance?
Terraform show command gave the below details:
187-110.eu-west-2.compute.internal"
    private_ip                           = "10.185.187.110"
    public_dns                           = "ec2-54-214-179-133.eu-west-2.compute.amazonaws.com"
    public_ip                            = "54.214.179.133"
Ans  54.214.179.133

Que: We use the public IPv4 address to access this server. However, when this server is rebooted or recreated, this IP address would change.
To fix this, let's create an Elastic IP Address.
An Elastic IP address is a static IPv4 address which does not change over time.
Create an Elastic IP resource with the following specifications:
    1. Resource Name  eip
    2. vpc: true
    3. instance: id of the EC2 instance created for resource cerberus (use a reference expression)
    4. create a local-exec provisioner for the eip resource and use it to print the attribute called public_dns to a file /root/cerberus_public_dns.txt on the iac-server.
If unsure, refer to the documentation. Documentation tab is available at the top right.
Ans: Not retrieved using terraform show command