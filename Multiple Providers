Que: Can we use multiple providers in the same configuration directory?
Ans: Yes

Que: We have a new configuration directory located at the path /root/terraform-projects/multi-provider. Inspect this directory and find out the number of providers initialized.
Ans: Don't run the terraform init command yet!
0 [Go to the .terraform/providers directory and count the number of provider plugins installed. If the directory does not exist, there are no plugins downloaded yet.]


Que: Now, Navigate to the directory /root/terraform-projects/MPL. Create a new configuration file called pet-name.tf.
This file should make use of the local_file and random_pet resource type with the below requirements:
local_file resource details:
Resource name = "my-pet"
File name = "/root/pet-name"
Content = "My pet is called finnegan!!"
random_pet resource details:
Resource name = "other-pet"
Length ="1"
Prefix = "Mr"
Separator = "."
Once the configuration file has been created, use the terraform workflow to create this resource.
Ans: 
resource "local_file" "my-pet" {
filename = "/root/pet-name"
content = "My pet is called finnegan!!"

}
resource "random_pet" "other-pet" {
length = 1
prefix = "Mr"
separator = "."

}
Que: 
Now change into the directory /root/terraform-projects/provider and inspect the file cloud-provider.tf.
What is the instance_type configured with the resource type called aws_instance?
Don't worry if you are not familiar with the aws providers. We will cover it later on.
Ans:
resource "aws_instance" "ec2_instance" {
ami = "ami-0eda277a0b884c5ab" 
instance_type = "t2.large"
}

resource "aws_ebs_volume" "ec2_volume" {
availability_zone = "eu-west-1"
size = 10
}

t2.large

Que: What is the name of the resource configured with the resource type kubernetes_namespace in kube.tf file within the same directory?
Ans: 
resource "local_file" "data" {
filename = "/root/k8s.txt"
content = "kubernetes the hard way!"
}

resource "kubernetes_namespace" "dev" {
metadata {
name = "development"
}
}

dev

Que: Let's get some more practice! Now navigate to the directory path /root/terraform-projects/provider-a. Create a configuration file called code.tf.
Using the local_file resource type, write the resource block with the below requirements into the file:
Resource name = iac_code
File name = /opt/practice
Content = Setting up infrastructure as code
When ready, only run the terraform init command, we will run the terraform apply command later on.
Ans:
resource "local_file" "iac_code" {
filename = "/opt/practice"
content = "Setting up infrastructure as code"
}